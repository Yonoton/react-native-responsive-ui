{"version":3,"sources":["MediaQuery.tsx"],"names":["PixelRatio","Platform","useDimensions","isInInterval","value","min","max","undefined","mediaQuery","query","width","height","minWidth","maxWidth","minHeight","maxHeight","minAspectRatio","maxAspectRatio","minPixelRatio","maxPixelRatio","orientation","platform","condition","currentOrientation","get","OS","MediaQuery","children","props","val"],"mappings":"AACA,SAASA,UAAT,EAAqBC,QAArB,QAAqD,cAArD;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AAkBA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,KAD0B,EAE1BC,GAF0B,EAG1BC,GAH0B,KAK1B,CAACD,GAAG,KAAKE,SAAR,IAAqBH,KAAK,IAAIC,GAA/B,MAAwCC,GAAG,KAAKC,SAAR,IAAqBH,KAAK,IAAIE,GAAtE,CALK;AAOP,OAAO,MAAME,UAAU,GAAG,CACxBC,KADwB,EAExBC,KAFwB,EAGxBC,MAHwB,KAIZ;AACZ,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,aAPI;AAQJC,IAAAA,aARI;AASJC,IAAAA,WATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA;AAXI,MAYFb,KAZJ;AAaA,QAAMc,kBAA+B,GACnCb,KAAK,GAAGC,MAAR,GAAiB,WAAjB,GAA+B,UADjC;AAEA,SACER,YAAY,CAACO,KAAD,EAAQE,QAAR,EAAkBC,QAAlB,CAAZ,IACAV,YAAY,CAACQ,MAAD,EAASG,SAAT,EAAoBC,SAApB,CADZ,IAEAZ,YAAY,CAACO,KAAK,GAAGC,MAAT,EAAiBK,cAAjB,EAAiCC,cAAjC,CAFZ,IAGAd,YAAY,CAACH,UAAU,CAACwB,GAAX,EAAD,EAAmBN,aAAnB,EAAkCC,aAAlC,CAHZ,KAICC,WAAW,KAAKb,SAAhB,IAA6Ba,WAAW,KAAKG,kBAJ9C,MAKCF,QAAQ,KAAKd,SAAb,IAA0Bc,QAAQ,KAAKpB,QAAQ,CAACwB,EALjD,MAMCH,SAAS,KAAKf,SAAd,IAA2Be,SAN5B,CADF;AASD,CA7BM;;AA+BP,MAAMI,UAAgC,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGC;AAAf,CAAD,KAA4B;AACnE,QAAM;AAAElB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBT,aAAa,EAAvC;AACA,QAAM2B,GAAG,GAAGrB,UAAU,CAACoB,KAAD,EAAQlB,KAAR,EAAeC,MAAf,CAAtB;;AACA,MAAIkB,GAAJ,EAAS;AACP,WAAOF,QAAP;AACD;;AACD,SAAO,IAAP;AACD,CAPD;;AASA,eAAeD,UAAf","sourcesContent":["import type * as React from \"react\";\nimport { PixelRatio, Platform, PlatformOSType } from \"react-native\";\n\nimport useDimensions from \"./useDimensions\";\n\ntype Orientation = \"landscape\" | \"portrait\";\n\nexport interface MediaQuery {\n  minHeight?: number;\n  maxHeight?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  minAspectRatio?: number;\n  maxAspectRatio?: number;\n  minPixelRatio?: number;\n  maxPixelRatio?: number;\n  orientation?: Orientation;\n  condition?: boolean;\n  platform?: PlatformOSType;\n}\n\nexport const isInInterval = (\n  value: number,\n  min?: number,\n  max?: number\n): boolean =>\n  (min === undefined || value >= min) && (max === undefined || value <= max);\n\nexport const mediaQuery = (\n  query: MediaQuery,\n  width: number,\n  height: number\n): boolean => {\n  const {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight,\n    minAspectRatio,\n    maxAspectRatio,\n    minPixelRatio,\n    maxPixelRatio,\n    orientation,\n    platform,\n    condition,\n  } = query;\n  const currentOrientation: Orientation =\n    width > height ? \"landscape\" : \"portrait\";\n  return (\n    isInInterval(width, minWidth, maxWidth) &&\n    isInInterval(height, minHeight, maxHeight) &&\n    isInInterval(width / height, minAspectRatio, maxAspectRatio) &&\n    isInInterval(PixelRatio.get(), minPixelRatio, maxPixelRatio) &&\n    (orientation === undefined || orientation === currentOrientation) &&\n    (platform === undefined || platform === Platform.OS) &&\n    (condition === undefined || condition)\n  );\n};\n\nconst MediaQuery: React.FC<MediaQuery> = ({ children, ...props }) => {\n  const { width, height } = useDimensions();\n  const val = mediaQuery(props, width, height);\n  if (val) {\n    return children as JSX.Element;\n  }\n  return null;\n};\n\nexport default MediaQuery;\n"]}